@app.route('/admin/add_staff', methods=['POST'])
def add_staff():
    data = request.get_json()

    # Check if the ID number already exists in the database
    id_number = data.get('id_number')
    staff_list = db.collection('staff').where('id_number', '==', id_number).get()

    if staff_list:  # If a staff with this ID already exists
        return jsonify({'success': False, 'message': 'ID number already exists.'}), 400

    # Get the last added staff's ID to generate the new staff ID
    last_staff = db.collection('staff').order_by('staff_id', direction='DESCENDING').limit(1).get()
    
    if last_staff:
        last_staff_id = last_staff[0].to_dict().get('staff_id', 999)  # Start from 1000
    else:
        last_staff_id = 999  # No staff exists yet, start from 1000

    new_staff_id = last_staff_id + 1  # Increment the last staff ID

    # Add new staff to the database with the generated staff ID
    new_staff = {
        'staff_id': new_staff_id,
        'name': data.get('name'),
        'email': data.get('email'),
        'id_number': id_number,
        'address': data.get('address'),
        'mobile': data.get('mobile'),
        'job_position': data.get('job_position'),
    }

    db.collection('staff').add(new_staff)
    
    return jsonify({'success': True, 'message': 'Staff added successfully.'})

        
@app.route('/admin/edit_staff/<staff_id>', methods=['PUT'])
def edit_staff(staff_id):
    try:
        data = request.get_json()
        
        # Check if the new ID number already exists for another staff member
        existing_staff = db.collection('staff').where('id_number', '==', data['id_number']).get()
        if existing_staff and existing_staff[0].id != staff_id:
            return jsonify({'success': False, 'message': 'ID number already exists.'}), 400

        # Update the staff information in Firestore
        staff_ref = db.collection('staff').document(staff_id)
        staff_ref.update({
            'name': data['name'],
            'email': data['email'],
            'id_number': data['id_number'],
            'address': data['address'],
            'mobile': data['mobile'],
            'job_position': data['job_position']
        })

        return jsonify({'success': True, 'message': 'Staff updated successfully.'})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500


@app.route('/admin/delete_staff/<staff_id>', methods=['DELETE'])
def delete_staff(staff_id):
    # Delete the staff document from Firestore
    db.collection('staff').document(staff_id).delete()

    return jsonify({'success': True, 'message': 'Staff deleted successfully.'})















    // Add staff form submission
document.getElementById('add-staff-form').addEventListener('submit', function(event) {
    event.preventDefault();  // Prevent the form's default submission behavior

    const formData = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        id_number: document.getElementById('id_number').value,
        address: document.getElementById('address').value,
        mobile: document.getElementById('mobile').value,
        job_position: document.getElementById('job_position').value,
    };

    fetch('/admin/add_staff', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',  // Send JSON data
        },
        body: JSON.stringify(formData),
    })
    .then(response => {
        if (!response.ok) {
            // If response is not 2xx, throw an error
            return response.json().then(data => { throw new Error(data.message); });
        }
        return response.json();  // Parse JSON response if successful
    })
    .then(data => {
        if (data.success) {
            location.reload();  // Reload the page if success
        }
    })
    .catch(error => {
        // Display error message if there's an error (e.g., ID already exists)
        document.getElementById('staff-error-message').textContent = error.message;
        document.getElementById('staff-error-message').style.display = 'block';
    });
});

// Delete staff
document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', function() {
        const row = this.closest('tr');
        const staffId = row.getAttribute('data-id');

        // Confirm before deletion
        if (confirm('Are you sure you want to delete this staff?')) {
            fetch(`/admin/delete_staff/${staffId}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw new Error(data.message); });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    location.reload();  // Reload the page to reflect the deletion
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
    });
});


// Edit staff
document.querySelectorAll('.edit-btn').forEach(button => {
    button.addEventListener('click', function() {
        const row = this.closest('tr');
        const staffId = row.getAttribute('data-id');

        // Set the staff ID in the hidden field
        document.getElementById('edit-staff-id').value = staffId;

        // Pre-fill the form fields with the existing staff data
        document.getElementById('edit-name').value = row.querySelector('td:nth-child(2)').textContent;
        document.getElementById('edit-email').value = row.querySelector('td:nth-child(3)').textContent;
        document.getElementById('edit-id_number').value = row.querySelector('td:nth-child(4)').textContent;
        document.getElementById('edit-address').value = row.querySelector('td:nth-child(5)').textContent;
        document.getElementById('edit-mobile').value = row.querySelector('td:nth-child(6)').textContent;
        document.getElementById('edit-job_position').value = row.querySelector('td:nth-child(7)').textContent;

        // Show the modal
        $('#edit-staff-modal').modal('show');
    });
});

// Save the edited staff details
document.getElementById('save-edit-btn').addEventListener('click', function() {
    const staffId = document.getElementById('edit-staff-id').value;
    const updatedData = {
        name: document.getElementById('edit-name').value,
        email: document.getElementById('edit-email').value,
        id_number: document.getElementById('edit-id_number').value,
        address: document.getElementById('edit-address').value,
        mobile: document.getElementById('edit-mobile').value,
        job_position: document.getElementById('edit-job_position').value,
    };

    fetch(`/admin/edit_staff/${staffId}`, {
    method: 'PUT',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedData),
})
.then(response => {
    if (!response.ok) {
        // Check if the response is HTML and handle accordingly
        return response.text().then(text => { throw new Error(text); });
    }
    return response.json();
})
.then(data => {
    if (data.success) {
        $('#edit-staff-modal').modal('hide');
        location.reload();  // Reload the page to reflect changes
    }
})
.catch(error => {
    document.getElementById('edit-error-message').textContent = error.message;
    document.getElementById('edit-error-message').style.display = 'block';
});

});